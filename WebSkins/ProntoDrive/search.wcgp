/*

  Copyright 2013 Anton Katsarov <anton@webface.bg>

  Distributed under the MIT License.

  See accompanying file COPYING or copy at
  http://opensource.org/licenses/MIT

*/
/*
  Descrition:

  The search engine for files and folders
*/

function sizeReadable(size, type) forward;
function dateReadable(theDate) forward;
function search(searchString) forward;
function findFiles(searchString, path, theSet) forward;

entry main is
  MyAccountName = MyEmail();
  if IsString(MyAccountName) then
  SetHTTPResponseData(ObjectToJSON(search(GetHTTPParameter("search",0))));
  end if;
end entry;

function search(searchString) is
    // Check if private Folder exists
    rootFolder = ListStorageFiles("");
    baseFound = false;
    for i = 0  while i < Length(rootFolder) by i+= 1 loop
      if !IsNumber(rootFolder.(rootFolder[i]).STFileSize) && rootFolder[i] == "private" then
        baseFound = true;
      end if;
      exitif baseFound;
    end loop;
    if !baseFound then
      creationResult = CreateStorageDirectory("private");
    end if;
    path = GetHTTPParameter("path",0);
    theSet = NewDictionary();
    theSet.Folders = NewArray();
    theSet.Files = NewArray();
    //List Folders
    folder = "private";
    if IsString(path) && path != "" && path != " " then
      folder = folder + "/" + path;
      theSet.path = path;
      path = String(FindRegEx(path,"^.+/"));
      path = Substring(path, 2, Length(path) - 5);
      if !IsString(path) then
        path = " ";
      end if;
    end if;
    return findFiles(searchString, folder, theSet);
end function;


function findFiles(searchString, path, theSet) is
    listedFolder = ListStorageFiles(path);
    for i = 0 while i < Length(listedFolder) by i+=1 loop
      theElement = NewDictionary();
      theElement.Size = sizeReadable(listedFolder.(listedFolder[i]).STFileSize, "B");
      theElement.Modified = dateReadable(listedFolder.(listedFolder[i]).STModified);
      theElement.Path = path;
      theElement.Name = listedFolder[i];
      ext = String(FindRegEx(ToLowerCase(listedFolder[i]),"[.][a-z0-9]+$"));
      theElement.Ext = Substring(ext, 2, Length(ext) - 3);

      found = FindSubstring(ToLowerCase(listedFolder[i]), ToLowerCase(searchString));
      if IsNumber(listedFolder.(listedFolder[i]).STFileSize) then
        if IsNumber(found) && found > -1 then
          theSet.Files.addElement(theElement);
        end if;
      else
        if listedFolder[i] != "IM" && listedFolder[i] != "_upload" && listedFolder[i] != "settings" && listedFolder[i] != "logs" || path !="private" then
          if IsNumber(found) && found > -1 then
            theSet.Folders.addElement(theElement);
          end if;
          theSet = findFiles(searchString, path + "/" + listedFolder[i], theSet);
      end if;
      end if;
    end loop;
    return theSet;
end function;

function sizeReadable(size, type) is
  if IsNumber(size) then
    if size > 1024 then
      localType = "B";
      if type == "B" then
        localType = "kB";
      elif type == "kB" then
        localType = "MB";
      elif type == "MB" then
        localType = "GB";
      elif type == "GB" then
        localType = "TB";
      end if;
      size = Number(sizeReadable(size/1024, localType));
      return String(size) + localType;
    else
    return String(size) + type;
    end if;
  else
    return "O" + type;
  end if;
end function;

function dateReadable(theDate) is
  stringDate = String(theDate);
  return Substring(stringDate,0,10) + " " + Substring(stringDate,11,20);
end function;
